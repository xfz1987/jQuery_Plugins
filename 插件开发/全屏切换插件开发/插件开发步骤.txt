* 利用闭包
  (function($){//do someting})(jQuery);
  * 闭包的作用:
    1.避免全局依赖
    2.避免第三方破坏
    3.兼容jQuery攒哦做符'$'和jQuery

* 开发方式
  * 类级别组建开发
    - 给jQuery命名空间下添加新的全局函数，也称为静态方法
      jQuery.myPlugin = function(){//do something};
      例如: $.Ajax()、$.extend()

  * 对象级别组件开发
    - 挂在jQuery原型下的方法，这样通过选择器获取的jQuery
      对象实例也能共享该方法，也称动态方法
      $.fn.myPlugin = function(){//do something};
        * 这里$.fn === $.prototype
          例如: addClass()、attr()等，需要创建实例来调用

* 链式调用
  $('div').next().addClass()....
  $.fn.myPlugin = function(){
      return this.each(function(){
	//do something
      });
  }

* 单例模式
  $.fn.MyPlugin = function(){
     var me = $(this);
     var instance = me.data('myPlugin');
     if(!instance){
	me.data('myPlugin',(instance = new myPlugin()));
     }
  }

  --如果实例存在则不再重新创建实例
  --利用data()来存放插件对象的实例
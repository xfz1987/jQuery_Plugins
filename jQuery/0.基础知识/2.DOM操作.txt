【DOM方式回顾】
   * 获取HTML页面元素                           * 遍历HTML页面元素：                                
     * getElementById()			           * 节点方式：                                      
     * getElementsByName()		             * 父节点：parentNode                            
     * getElementsByTagName()		             * 子节点：                                      
     					               * childNodes                                   
     * getElementsByClassName()		      	       * firstChild                                   
       * 问题：浏览器兼容性不好	       	       * lastChild                                    
     * querySelector(className)		      	         * 问题：浏览器解释子节点时，将换行视为子节点 
     * querySelectorAll(className)	      	         * 解决：使用getElementsByTagName()方法        
       * 性能差				            * 兄弟节点：                                    
					              * 上一个兄弟节点                              
					      	      * 下一个兄弟节点                              


     * 元素方式                               * 创建HTML页面元素：                      
       * 父元素：parentElement		         * 元素节点：createElement(标签名)       
       * 子元素：			         * 文本节点：createTextNode(文本内容)    
         * children			        * 属性节点：createAttributeNode(属性名) 
	 * firstElementChild		          * 属性节点不是子节点                  
	 * lastElementChild
       * 兄弟元素
  
    
   * 操作属性：                               * 插入HTML页面元素：                      
     * getAttribute(name)		         * parent.appendChild(child)              
     * setAttribute(name, value)	           * 子节点列表中的最后                  
     * removeAttribute(name)		         * parent.insertBefore(newChild,oldChild) 
					           * 插入在指定子节点的前面              
     * getAttributeNode()		         * 没有insertAfter()方法                  
     * setAttributeNode()		         * innerHTML\innerText\textContent等        
     * removeAttributeNode()
  
-------------------------------------------------------------------------------------------
【jquery方式】
1.属性
  ①属性
    attr(name) - 取得（第一个）匹配元素的属性值
               注意：如果元素没有相应属性，则返回 undefined

    attr(name,value) - 为所有匹配的元素设置一个属性值
    removeAttr(name) - 从每一个匹配的元素中删除一个属性
    attr(properties) - 将一个“名:值”形式的对象设置为（所有）匹配元素的属性。
                       这是一种在所有匹配元素中批量设置很多属性的最佳方式。 
		     注意: 如果你要设置对象的class属性，你必须使用'className' 作为属性名。
		           或者你可以直接使用.addClass(class) 和 .removeClass(class).
	               例：$("img").attr({ src: "test.jpg", alt: "Test Image"});              

  ②CSS类
    addClass(className) - 为（所有）匹配的元素添加指定的类名（多个类名用空格分开）
    addClass(function(index,className))
    
    removeClass()  - 从所有匹配的元素中删除全部的类
    removeClass(className) - 从所有匹配的元素中删除指定的类
    removeClass(function(index,className))
    
    toggleClass(className) - 如果存在（不存在）就删除（添加）一个类
    toggleClass(className,switch) - 如果开关switch参数为true则加上对应的类，否则就删除

    hasClass(className)  -  判断当前元素是否含有指定的class，return true/false
    等效于 .is("." + className)

  ③HTML
    html() -  封装了innerHTML属性(该函数不能用于XML文档。但可以用于XHTML文档)
           注意：返回（第一个）匹配元素的html内容，
	         如果遍历jquery对象时，jquery对象[索引]得到的是DOM对象
		 没有找到，则返回""
    
    html(val) - 设置所有匹配元素的html内容(can't use in XML but XHTML)
    html(function(index,html))  -  此函数返回一个HTML字符串。接受两个参数，index为元素在集合中的索引位置，html为原先的HTML值。

  ④文本
    text() - 返回（所有）匹配元素的内容，结果是由所有匹配元素包含的文本内容组合起来的文本。这个方法对HTML和XML文档都有效。
	     没有找到则返回""

    text(val) - 设置所有匹配元素的文本内容
    text(function(index,html))  -  此函数返回一个字符串。接受两个参数，index为元素在集合中的索引位置，text为原先的text值。
     
  ⑤值 
    val()  -  获得（第一个）匹配元素的当前value值（在 jQuery 1.2 中,可以返回任意元素的值了。包括select。如果多选，将返回一个数组，其包含所选的值）
           注意: 根本没有value属性，返回""
    val(val) -  设置所有匹配元素的值（在 jQuery 1.2, 这也可以为select元件赋值）
    val(array) -  check,select,radio等都能使用为之赋值
    val(function(index,value))  -此函数返回一个要设置的值。接受两个参数，index为元素在集合中的索引位置，text为原先的text值。

2.遍历节点
  父元素 - parent() : 唯一父元素
           【已废除】parent(selector) : 有过滤条件selector
           parents() : 父元素的集合
           parents(selector) : 有过滤条件selector

  子元素 - children() : 子元素集合
	   children(selector) : 有过滤条件selector

  兄弟元素 - siblings
      前一个:  prev()
               prev(selector)
      
      前面所有兄弟: prevAll()
                    prevAll(selector)

               	    prevUntil() - 等同于 prevAll()
		    prevUntil(selector) -  查找当前元素之前所有的同辈元素，直到遇到匹配的那个元素为止
                           注意: 直到遇到了一个跟提供的参数匹配的元素的时候才会停下来。
			         这个新jQuery对象里包含了前面所有找到的同辈元素，但不包括那个选择器匹配到的元素。 
			         如果没有选择器匹配到 等同于 prevAll()

      下一个:  next()
               next(selector)
      后面所有兄弟: nextAll()
                    nextAll(selector)

		    nextUntil() - 等同于 nextAll()
		    nextUntil(selector) - 注意: 同prevUntil(selector)
                               

      指定元素的所有兄弟元素: siblings()
                               siblings([selector])

      通用遍历方法: find(selector) - 搜索所有与指定表达式匹配的元素，这个函数是找出正在处理的元素的后代元素的好方法。


3.节点操作
  ①创建元素节点 -  $(html)  html:完整的html代码
                例如: $("<div>myDiv</div>")或 $("<div></div>").text("myDiv")

  ②插入节点
         注意: 如果将原有的节点作为要插入的节点，无论内部插入还是外部插入，
	       要插入的节点插入完毕后，要插入的节点原本位置会被删除

         内部插入:
              - 父.append(content)   : 父追加新节点
              - 新.appendTo(content) : 将新节点追加到父节点
              - 父.prepend(content)  : 匹配元素内部的开始处插入内容的最佳方式
	      - 新.prependTo(content): 将新节点插入到父节点的第一个子节点
	 
	 外部插入: 效果如同“移动节点”
	      - after(content)  : 在每个匹配的元素之后插入内容
	      - before(content) : 在每个匹配的元素之前插入内容
		   A.after/before(B) - 在A后面或前面插入B

	      - insertAfter(content) : 把所有匹配的元素插入到另一个、指定的元素元素集合的后面 
	      - insertBefore(content): 把所有匹配的元素插入到另一个、指定的元素元素集合的前面
                   A.insertAfter/insertBefore(B)  -  将A插入到B的后面或前面
		   
		

  ③删除节点
    - A.remove/detach() : 从DOM中删除所有匹配的 A及所有子元素
      A.remove/detach(selector) : 
      这个方法只是在网页中删除，return：就是刚刚删掉的节点，
      但不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。
      但除了这个元素本身得以保留之外，其他的比如绑定的事件，附加的数据等都会被移除。

    - empty() : 删除匹配的元素集合中所有的子节点
                更适用于清空
  
  ④替换节点  
    - replaceWith(content) : 将所有匹配的元素替换成指定的HTML或DOM元素
                             A.replaceWith(B) ：用B替换A  

    - replaceAll(selector) : 用匹配的元素替换掉所有selector匹配到的元素
                             A.replaceAll(B)  ：用A替换B

  ⑤复制节点   [在想把DOM文档中元素的副本添加到其他位置时这个函数非常有用]
    - clone()  :  克隆匹配的DOM元素并且选中这些克隆的副本                
    - clone(true) : 元素以及其所有的事件处理并且选中这些克隆的副本
             
  ⑥包裹
    wrap()和wrapInner()方法都可以进行元素的包裹，但前者用于包裹元素本身，
    后者则用于包裹元素中的内容，它们的调用格式分别为：
    $(selector).wrap(wrapper)和$(selector).wrapInner(wrapper)


  